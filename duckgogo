<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Duck Greedy Tour</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      font-family: Arial;
    }
    canvas {
      display: block;
      background-image: url('map.png');
      background-size: cover;
    }
    #startButton {
      position: absolute;
      top: 20px;
      left: 20px;
      padding: 10px 20px;
      font-size: 16px;
      z-index: 2;
    }
    #timer {
      position: absolute;
      top: 20px;
      right: 20px;
      font-size: 16px;
      color: white;
      background: rgba(0, 0, 0, 0.5);
      padding: 5px 10px;
      border-radius: 5px;
      z-index: 2;
    }
  </style>
</head>
<body>
<button id="startButton">Start</button>
<div id="timer">Time: 0s</div>
<canvas id="canvas" width="4000" height="3000"></canvas>

<script>
  const ctx = canvas.getContext('2d');
  const duckMotherImg = new Image();
  duckMotherImg.src = 'duckmother.png';
  const babyDuckImg = new Image();
  babyDuckImg.src = 'babyduck.png';

  const lakes = [
    { x: 633, y: 397 },
    { x: 1695, y: 985 },
    { x: 3388, y: 451 },
    { x: 3746, y: 1369 },
    { x: 2757, y: 2013 },
    { x: 1666, y: 2448 },
    { x: 581, y: 1731 }
  ];

  let path = [];
  let visited = new Array(lakes.length).fill(false);
  let timeElapsed = 0;
  let mother = { x: lakes[0].x, y: lakes[0].y };
  let followingDucks = [];

  function greedyTSP(startIdx) {
    let tour = [startIdx];
    visited[startIdx] = true;
    let current = startIdx;
    for (let step = 1; step < lakes.length; step++) {
      let minDist = Infinity, next = -1;
      for (let i = 0; i < lakes.length; i++) {
        if (!visited[i]) {
          let dist = Math.hypot(lakes[current].x - lakes[i].x, lakes[current].y - lakes[i].y);
          if (dist < minDist) {
            minDist = dist;
            next = i;
          }
        }
      }
      tour.push(next);
      visited[next] = true;
      current = next;
    }
    return tour;
  }

  const tour = greedyTSP(0);

  tour.forEach((idx, i) => {
    if (i < tour.length - 1) {
      path.push([lakes[idx], lakes[tour[i + 1]]]);
    }
  });

  let progress = 0;
  let currentSegment = 0;
  let clearPath = [];
  let moving = false;

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    // Draw partial or full path
    path.forEach((segment, idx) => {
      ctx.beginPath();
      ctx.moveTo(segment[0].x, segment[0].y);
      ctx.lineTo(segment[1].x, segment[1].y);
      ctx.strokeStyle = clearPath.includes(idx) ? 'yellow' : 'rgba(255, 255, 0, 0.2)';
      ctx.lineWidth = 5;
      ctx.stroke();
    });

    // Draw baby ducks
    followingDucks.forEach((d) => {
      ctx.drawImage(babyDuckImg, d.x - 15, d.y - 15, 30, 30);
    });

    // Draw mother duck
    ctx.drawImage(duckMotherImg, mother.x - 20, mother.y - 20, 40, 40);
  }

  function animateStep() {
    if (!moving || currentSegment >= path.length) return;
    let [from, to] = path[currentSegment];
    let dx = to.x - from.x;
    let dy = to.y - from.y;
    let dist = Math.hypot(dx, dy);
    let steps = dist / 4; // speed control
    let t = progress / steps;

    if (t >= 1) {
      mother.x = to.x;
      mother.y = to.y;
      clearPath.push(currentSegment);
      followingDucks.push({ x: to.x, y: to.y });
      currentSegment++;
      progress = 0;
    } else {
      mother.x = from.x + dx * t;
      mother.y = from.y + dy * t;
      progress++;
    }
    draw();
    requestAnimationFrame(animateStep);
  }

  document.getElementById('startButton').addEventListener('click', () => {
    if (moving) return;
    moving = true;
    const timer = setInterval(() => {
      timeElapsed++;
      document.getElementById('timer').innerText = `Time: ${timeElapsed}s`;
      if (currentSegment >= path.length) clearInterval(timer);
    }, 1000);
    animateStep();
  });

  window.onload = () => draw();
</script>
</body>
</html>
