<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Duck Nearest Neighbor Approximation</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
            position: relative;
        }
        canvas {
            background-color: #ffffff;
            border: 1px solid #000;
            position: absolute;
            z-index: 0;
        }
        #startButton {
            padding: 30px 100px;
            font-size: 48px;
            cursor: pointer;
            background-color: #0077cc;
            color: white;
            border: none;
            border-radius: 6px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            position: absolute;
            top: 50px;
            left: 50%;
            transform: translateX(-50%);
        }
        #info {
            font-size: 50px;
            color: white;
            background: rgba(0, 0, 0, 0.6);
            padding: 40px 80px;
            border-radius: 5px;
            position: absolute;
            top: 10px;
            left: 10px;
            white-space: pre-line;
        }
    </style>
</head>
<body>
<button id="startButton">Start</button>
<div id="info">Time: 0s</div>
<canvas id="canvas" width="4400" height="2400"></canvas>

<script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    const duckMotherImg = new Image();
    duckMotherImg.src = 'duckmother.png';

    const babyDuckImg = new Image();
    babyDuckImg.src = 'babyduck.png';

    const NUM_DUCKS = 10;
    const ducks = [
        { x: 1844.2, y: 420 },
        { x: 1313.2, y: 622 },
        { x: 900.2, y: 923 },
        { x: 1121.2, y: 1633 },
        { x: 375.2, y: 1281 },
        { x: 1524.2, y: 2084 },
        { x: 2423.2, y: 1899 },
        { x: 3265.2, y: 2068 },
        { x: 2679.2, y: 622 },
        { x: 3444.2, y: 632 }
    ];

    let tour = [];
    let currentIdx = 0;
    let animating = false;
    let timerInterval;
    let time = 0;
    let duck = { x: 0, y: 0 };
    const footprints = [];
    const traversedEdges = [];
    let totalDistance = 0;

    const infoDiv = document.getElementById('info');
    const weights = [];

    function distance(a, b) {
        return Math.hypot(a.x - b.x, a.y - b.y);
    }

    function drawGrid() {
        const gridSize = 50;
        ctx.strokeStyle = '#ddd';
        for (let x = 0; x <= canvas.width; x += gridSize) {
            ctx.beginPath();
            ctx.moveTo(x, 0);
            ctx.lineTo(x, canvas.height);
            ctx.stroke();
        }
        for (let y = 0; y <= canvas.height; y += gridSize) {
            ctx.beginPath();
            ctx.moveTo(0, y);
            ctx.lineTo(canvas.width, y);
            ctx.stroke();
        }
    }

    function drawDucks() {
        ducks.forEach((duck, i) => {
            ctx.drawImage(babyDuckImg, duck.x - 80, duck.y - 80, 100, 100);
        });
    }

    function drawMotherDuck() {
        ctx.drawImage(duckMotherImg, duck.x - 160, duck.y - 160, 200, 200);
    }

    function drawFootprints() {
        ctx.fillStyle = 'gold';
        footprints.forEach(footprint => {
            ctx.beginPath();
            ctx.ellipse(footprint.x - 8, footprint.y, 5, 10, Math.PI / 6, 0, 2 * Math.PI);
            ctx.fill();
            ctx.beginPath();
            ctx.ellipse(footprint.x + 8, footprint.y, 5, 10, -Math.PI / 6, 0, 2 * Math.PI);
            ctx.fill();
        });
    }

    function drawWeights() {
        ctx.font = 'bold 30px Arial';
        ctx.fillStyle = 'black';
        weights.forEach(({ x, y, weight }) => {
            ctx.fillText(weight.toFixed(1), x + 10, y - 10);
        });
    }

    function hasEdgeBeenTraversed(from, to) {
        return traversedEdges.some(edge => {
            return (edge.from === from && edge.to === to) ||
                (edge.from === to && edge.to === from);
        });
    }

    function drawWeightsFromCurrent() {
        if (currentIdx >= tour.length) return;
        const currentDuckIdx = tour[currentIdx];
        const currentDuck = ducks[currentDuckIdx];

        ducks.forEach((d, i) => {
            if (i === currentDuckIdx) return;
            if (hasEdgeBeenTraversed(currentDuck, d)) return;

            ctx.strokeStyle = '#00aa00';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(currentDuck.x, currentDuck.y);
            ctx.lineTo(d.x, d.y);
            ctx.stroke();

            const w = distance(currentDuck, d);
            const midX = (currentDuck.x + d.x) / 2;
            const midY = (currentDuck.y + d.y) / 2;

            ctx.font = 'bold 36px Arial';
            ctx.fillStyle = '#007700';
            ctx.fillText(w.toFixed(1), midX + 10, midY - 10);
        });
    }

    function nearestNeighborTour() {
        const n = ducks.length;
        const visited = Array(n).fill(false);
        const tour = [];
        let current = 0;

        tour.push(current);
        visited[current] = true;

        while (tour.length < n) {
            let next = -1;
            let minDist = Infinity;
            for (let i = 0; i < n; i++) {
                if (!visited[i]) {
                    const d = distance(ducks[current], ducks[i]);
                    if (d < minDist) {
                        minDist = d;
                        next = i;
                    }
                }
            }
            if (next !== -1) {
                visited[next] = true;
                tour.push(next);
                current = next;
            } else {
                break;
            }
        }

        tour.push(tour[0]); // return to start
        return tour;
    }

    function animate() {
        if (!animating) return;

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawGrid();
        drawDucks();
        drawFootprints();
        drawMotherDuck();
        drawWeights();

        let target = ducks[tour[currentIdx]];
        const dx = target.x - duck.x;
        const dy = target.y - duck.y;
        const dist = Math.hypot(dx, dy);
        const speed = 3;

        if (dist > speed) {
            duck.x += dx / dist * speed;
            duck.y += dy / dist * speed;

            if (
                footprints.length === 0 ||
                Math.hypot(duck.x - footprints[footprints.length - 1].x, duck.y - footprints[footprints.length - 1].y) > 20
            ) {
                footprints.push({ x: duck.x, y: duck.y });
            }
        } else {
            if (currentIdx < tour.length - 1) {
                const from = ducks[tour[currentIdx]];
                const to = ducks[tour[currentIdx + 1]];
                const weight = distance(from, to);

                if (!hasEdgeBeenTraversed(from, to)) {
                    traversedEdges.push({ from, to, weight });
                    totalDistance += weight;
                }
            }

            currentIdx++;
            if (currentIdx < tour.length) {
                const currentDuck = ducks[tour[currentIdx]];
                const nextWeights = ducks.map((d, idx) => {
                    if (idx !== tour[currentIdx]) {
                        return { x: d.x, y: d.y, weight: distance(currentDuck, d) };
                    }
                    return null;
                }).filter(w => w !== null);
                weights.length = 0;
                weights.push(...nextWeights);
            } else {
                animating = false;
                clearInterval(timerInterval);
                infoDiv.textContent = `Time: ${time}s\nTotal Distance: ${totalDistance.toFixed(1)}`;
                return;
            }
        }

        drawWeightsFromCurrent();
        requestAnimationFrame(animate);
    }

    document.getElementById('startButton').addEventListener('click', () => {
        tour = nearestNeighborTour();
        duck = { x: ducks[tour[0]].x, y: ducks[tour[0]].y };
        footprints.length = 0;
        traversedEdges.length = 0;
        currentIdx = 0;
        totalDistance = 0;
        animating = true;
        time = 0;

        timerInterval = setInterval(() => {
            time++;
            infoDiv.textContent = `Time: ${time}s`;
        }, 1000);

        animate();
    });
</script>
</body>
</html>
